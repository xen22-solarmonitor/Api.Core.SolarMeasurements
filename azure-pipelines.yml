# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
  branches:
    include:
      - master
      - develop
      - feature/*
      - hotfix/*

# pool:
#   vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  solutionName: 'Api.Core.SolarMeasurements'
  version: '1.0.0'
  dockerId: 'solarmonitor'

  # Azure DevOps variables are transformed into environment variables, with these variables we
  # avoid the first time experience and telemetry to speed up the build.
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  
stages:

#############################################################################################        
# Stage: Build
#############################################################################################        

- stage: Build

  jobs:

  - job: Build

    pool:
      vmImage: 'ubuntu-latest'

    steps:
    
    - checkout: self
      submodules: true
      
    - task: GitVersion@5
      displayName: 'GitVersion'
      inputs:
        #updateAssemblyInfo: true
        preferBundledVersion: false
        
    - task: Assembly-Info-NetFramework@2
      displayName: 'Version API'
      inputs:
        Configuration: '$(buildConfiguration)'
        Path: '$(Build.SourcesDirectory)/src/Api.Core.SolarMeasurements'
        FileNames: '**/AssemblyInfo.cs'
        InsertAttributes: false
        FileEncoding: 'auto'
        WriteBOM: false
        Title: 'Solar measurements Core API'
        Product: 'SolarMonitor'
        Description: 'semanticVersion=$(GitVersion.FullSemVer); branch=$(Build.SourceBranch); commit=$(GitVersion.ShortSha)'
        Company: 'Adaptive Development'
        Copyright: 'Ciprian Toader'
        VersionNumber: '$(GitVersion.AssemblySemVer)'
        FileVersionNumber: '$(GitVersion.AssemblySemFileVer)'
        InformationalVersion: '$(GitVersion.InformationalVersion)'
        
    - task: Assembly-Info-NetCore@2
      displayName: 'Version Proxy client'
      inputs:
        Path: '$(Build.SourcesDirectory)/src/Api.Core.SolarMeasurementsProxy'
        FileNames: '**/*.csproj'
        InsertAttributes: true
        FileEncoding: 'auto'
        WriteBOM: false
        GeneratePackageOnBuild: false
        Authors: 'Ciprian Toader'
        Company: 'Adaptive Development'
        Product: 'SolarMonitor'
        Description: 'Solar Measurements Core API'
        VersionNumber: '$(GitVersion.FullSemVer)'
        FileVersionNumber: '$(GitVersion.AssemblySemFileVer)'
        InformationalVersion: '$(GitVersion.InformationalVersion)'
        PackageVersion: '$(GitVersion.FullSemVer)'

    - bash: sudo apt-get install jq
      displayName: 'Installing build dependency: jq'

    # - task: DotNetCoreInstaller@0
    #   displayName: 'Install .net core 3.0 (preview)'
    #   inputs:
    #     version: '3.0.100-preview6-012264'
    - task: UseDotNet@2
      displayName: 'Install .NET Core 3.0 SDK'
      inputs:
        packageType: 'sdk'
        version: '3.0.100-preview6-012264'
        includePreviewVersions: true
        
    # create links to .NET Core Runtimes from v. 2.2 because it is needed by 'dotnet swagger' CLI
    - bash: ln -s /usr/share/dotnet/shared/Microsoft.NETCore.App/2.2.?/ $(dirname `which dotnet`)/shared/Microsoft.NETCore.App
      displayName: 'Create link to NETCoreApp 2.2 runtime (for dotnet CLI 3.0)'
    - bash: ln -s /usr/share/dotnet/shared/Microsoft.AspNetCore.App/2.2.?/ $(dirname `which dotnet`)/shared/Microsoft.AspNetCore.App
      displayName: 'Create link to AspNetCore 2.2 runtime (for dotnet CLI 3.0)'
        
    - task: DotNetCoreCLI@2
      displayName: 'Restore NuGet dependencies'
      inputs:
        command: 'restore'
        projects: './Api.Core.SolarMeasurements.sln'
        feedsToUse: 'config'
        nugetConfigPath: './NuGet.Config'
        
    - task: DotNetCoreCLI@2
      displayName: 'Build solution'
      inputs:
        command: 'build'
        projects: './Api.Core.SolarMeasurements.sln'
        arguments: '--no-restore --configuration $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: 'Publish API binaries'
      inputs:
        command: 'publish'
        projects: './Api.Core.SolarMeasurements.sln'
        zipAfterPublish: false
        publishWebProjects: true
        arguments: '--no-build --configuration $(buildConfiguration)'
        
    - task: PublishBuildArtifacts@1
      displayName: 'Publish generated swagger.json file for this build.'
      inputs:
        pathToPublish: '$(System.DefaultWorkingDirectory)/src/Api.Core.SolarMeasurementsProxy/AutoGeneratedSwaggerDefinition/swagger.json'
        artifactName: 'swagger'
        
    - bash: ls -la $(System.DefaultWorkingDirectory)/src/Api.Core.SolarMeasurements/bin/$(buildConfiguration)/netcoreapp3.0

    - publish: $(System.DefaultWorkingDirectory)/src/Api.Core.SolarMeasurements/bin/$(buildConfiguration)/netcoreapp3.0/publish
      displayName: 'Archive API binaries'
      artifact: ApiBinaries

    - publish: $(System.DefaultWorkingDirectory)/src/Api.Core.SolarMeasurements/Dockerfile
      displayName: 'Archive Dockerfile'
      artifact: Dockerfile

      # Note: we cannot publish just the binaries for the unit and integration tests because we also need the source code
#       when we do code coverage
#    - publish: $(System.DefaultWorkingDirectory)/test/unit/Api.Core.SolarMeasurementsUnitTests/bin/$(buildConfiguration)/netcoreapp3.0/publish/
#      displayName: 'Archive Unit test binaries'
#      artifact: UnitTestBinaries
#
#    - publish: $(System.DefaultWorkingDirectory)/test/integration/Api.Core.SolarMeasurementsIntegrationTests/bin/$(buildConfiguration)/netcoreapp3.0/publish/
#      displayName: 'Archive Integration test binaries'
#      artifact: IntegrationTestBinaries

    - publish: $(System.DefaultWorkingDirectory)
      displayName: 'Archive fully built source tree'
      artifact: BuiltSourceTree

  #############################################################################################        
  # Stage: Tests
  #############################################################################################        

- stage: Tests

  jobs:

    - job: UnitTests

      displayName: 'Run unit tests'

      pool:
        vmImage: 'ubuntu-latest'
      
      steps:

        # skip source code checkout since we've already built and archived it 
        - checkout: none
          
        - download: current
          artifact: BuiltSourceTree
            
        - task: UseDotNet@2
          displayName: 'Install .NET Core 3.0 SDK'
          inputs:
            packageType: 'sdk'
            version: '3.0.100-preview6-012264'
            includePreviewVersions: true
            
        - task: DotNetCoreCLI@2
          displayName: 'Run unit tests'
          inputs:
            command: 'test'
            projects: '$(Pipeline.Workspace)/BuiltSourceTree/test/unit/Api.Core.SolarMeasurementsUnitTests/Api.Core.SolarMeasurementsUnitTests.csproj'
            testRunTitle: 'Run unit tests'
            publishTestResults: true
            arguments: '--no-build --configuration $(buildConfiguration)'

        - bash: echo "Publish results..."
        - bash: echo "Save coverage report..."

    - job: IntegrationTests
      dependsOn: []    # this removes the implicit dependency on previous job and causes this to run in parallel
      displayName: 'Run integration tests'
      pool:
        vmImage: 'ubuntu-latest'
      steps:

        # skip source code checkout since we've already built and archived it 
        - checkout: none

        - download: current
          artifact: BuiltSourceTree

        - task: UseDotNet@2
          displayName: 'Install .NET Core 3.0 SDK'
          inputs:
            packageType: 'sdk'
            version: '3.0.100-preview6-012264'
            includePreviewVersions: true

        - task: DotNetCoreCLI@2
          displayName: 'Run integration tests'
          inputs:
            command: 'test'
            projects: '$(Pipeline.Workspace)/BuiltSourceTree/test/integration/Api.Core.SolarMeasurementsIntegrationTests/Api.Core.SolarMeasurementsIntegrationTests.csproj'
            testRunTitle: 'Run integration tests'
            publishTestResults: true
            arguments: '--no-build --configuration $(buildConfiguration)'
  
        - bash: echo "Publish results..."
        - bash: echo "Save coverage report..."

  #############################################################################################        
  # Stage: Publish
  #############################################################################################        

- stage: Publish
  jobs:
    - job: DockerImageCreate

      displayName: 'Publish API Docker image for the API'

      pool:
        vmImage: 'ubuntu-latest'

      steps:
        - checkout: none

#        - download: current
#          artifact: ApiBinaries
#          
#        - download: current
#          artifact: Dockerfile
          
        - download: current
          artifact: BuiltSourceTree 
          
        - bash: ls -lF $(Pipeline.Workspace)/BuiltSourceTree 
        #ApiBinaries $(Pipeline.Workspace)/Dockerfile $(Pipeline.Workspace)/TestResults

        - task: Docker@2
          displayName: 'Login to DockerHub'
          inputs:
            command: 'login'
            containerRegistry: 'DockerHub connection (xen22)'

        - task: Docker@2
          displayName: 'Create Docker image'
          inputs:
            command: 'build'
            Dockerfile: '$(Pipeline.Workspace)/BuiltSourceTree/src/Api.Core.SolarMeasurements/Dockerfile'
            tags: '$(version)-$(Build.BuildId)'
            repository: '$(dockerId)/api.core.solarmeasurements'
            
        #- script: docker build -f $(Pipeline.Workspace)/BuiltSourceTree/src/Api.Core.SolarMeasurements/Dockerfile -t $(dockerId)/api.core.solarmeasurements:$(version)-$(Build.BuildId) .  # add options to this command to meet your needs

        - task: Docker@2
          displayName: 'Push Docker image'
          inputs:
            command: 'push'
            Dockerfile: '$(Pipeline.Workspace)/BuiltSourceTree/src/Api.Core.SolarMeasurements/Dockerfile'
            tags: '$(version)-$(Build.BuildId)'
            repository: '$(dockerId)/api.core.solarmeasurements'

    - job: CreateApiProxy
      displayName: 'Create and publish API Proxy to NuGet repo'
      pool:
        vmImage: 'ubuntu-latest'

      steps:
        - task: UseDotNet@2
          displayName: 'Install .NET Core 3.0 SDK'
          inputs:
            packageType: 'sdk'
            version: '3.0.100-preview6-012264'
            includePreviewVersions: true

        - download: current
          artifact: BuiltSourceTree

        - task: DownloadPipelineArtifact@2
          displayName: 'Retrieve swagger.json from previous build'
          inputs:
            artifact: 'swagger'
            path: '$(Pipeline.Workspace)'
            source: 'specific'
            pipeline: '$(System.DefinitionId)'
            project: '$(System.TeamProjectId)'
            runVersion: 'latestFromBranch'
            runBranch: '$(Build.SourceBranch)'

        - bash: 'cmp $(Pipeline.Workspace)/BuiltSourceTree/src/Api.Core.SolarMeasurementsProxy/AutoGeneratedSwaggerDefinition/swagger.json $(Pipeline.Workspace)/swagger.json'
          displayName: 'Comparing previous version of swagger to the current one'

        - bash: |
            SWAGGER_OUTPUT=$(cmp $(Pipeline.Workspace)/BuiltSourceTree/src/Api.Core.SolarMeasurementsProxy/AutoGeneratedSwaggerDefinition/swagger.json $(Pipeline.Workspace)/swagger.json)
            SWAGGER_CHANGED=$?
            echo "bash comparison stdout: $SWAGGER_OUTPUT"
            echo "bash comparison exit code: $SWAGGER_CHANGED"
            echo "##vso[task.setvariable variable=swaggerChanged]$SWAGGER_CHANGED"
          displayName: 'Creating Azure pipelines variable swaggerChanged'

        - task: DotNetCoreCLI@2
          displayName: 'Create Proxy Client Nuget package'
          condition: eq(${{ swaggerChanged }}, 0)
          inputs:
            command: 'custom'
            projects: '$(Pipeline.Workspace)/BuiltSourceTree/src/Api.Core.SolarMeasurementsProxy/*.csproj'
            custom: 'pack'
            arguments: '--no-build --configuration ${{ parameters.BuildConfiguration }} --output $(Build.ArtifactsStagingDirectory)'

        - task: NuGetCommand@2
          displayName: 'Publish Proxy Client Nuget package'
          condition: eq(${{ swaggerChanged }}, 0)
          inputs:
            command: 'push'
            nuGetFeedType: 'external'
            publishFeedCredentials: 'Nuget.org service connection'
            allowPackageConflicts: true



  #############################################################################################        
# Stage: Deploy
#############################################################################################        

# TODO: deploy to Staging/QA (or should this go into a separate release pipeline?)



  #    - script: dotnet build --configuration $(buildConfiguration)
#      displayName: 'dotnet build $(buildConfiguration)'
#    - script: dotnet publish --configuration $(buildConfiguration) src/Api.Core.SolarMeasurements/Api.Core.SolarMeasurements.csproj
#      displayName: 'dotnet publish $(buildConfiguration)'
#    - script: 'docker build -t $(dockerId)/Api.Core.SolarMeasurements:$(version)-$(Build.BuildId)' 
#      displayName: 'docker build image'
#    - script: 'docker login -u $(dockerId) -p $(dockerPwd)'
#      displayName: 'docker login'
#    - script: 'docker push $(dockerId)/$(dockerRepo):Api.Core.SolarMeasurements'
  


# steps:
# # - task: DotNetCoreInstaller@0
# #   displayName: 'Install .net core 3.0 (preview)'
# #   inputs:
# #     version: '3.0.100-preview6-012264'
# - task: UseDotNet@2
#   displayName: 'Install .NET Core 3.0 SDK'
#   inputs:
#     packageType: 'sdk'
#     version: '3.0.100-preview6-012264'
#     includePreviewVersions: true
# - script: dotnet build --configuration $(buildConfiguration)
#   displayName: 'dotnet build $(buildConfiguration)'

# run unit tests
# - task: DotNetCoreCLI@2
#   displayName: 'Run unit tests'
#   inputs:
#     command: 'test'
#     projects: './test/unit/Api.Core.SolarMeasurementsUnitTests/Api.Core.SolarMeasurementsUnitTests.csproj'
#     testRunTitle: 'Run unit tests'

# run integration tests
# - task: DotNetCoreCLI@2
#   displayName: 'Run integration tests'
#   inputs:
#     command: 'test'
#     projects: './test/integration/Api.Core.SolarMeasurementsIntegrationTests/Api.Core.SolarMeasurementsIntegrationTests.csproj'
#     testRunTitle: 'Run integration tests'

# generate proxy

# push proxy to Nuget repo

 
