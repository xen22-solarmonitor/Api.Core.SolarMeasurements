# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
  branches:
    include:
      - master
      - feature/*

# pool:
#   vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  solutionName: 'Api.Core.SolarMeasurements'
  version: '1.0'
  dockerId: 'xen22'
  dockerRepo: 'solarmonitor'

  # Azure DevOps variables are transformed into environment variables, with these variables we
  # avoid the first time experience and telemetry to speed up the build.
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  
stages:

#############################################################################################        
# Stage: Build
#############################################################################################        

- stage: Build

  jobs:

  - job: Build

    pool:
      vmImage: 'ubuntu-latest'

    steps:
    # - task: DotNetCoreInstaller@0
    #   displayName: 'Install .net core 3.0 (preview)'
    #   inputs:
    #     version: '3.0.100-preview6-012264'
    - task: UseDotNet@2
      displayName: 'Install .NET Core 3.0 SDK'
      inputs:
        packageType: 'sdk'
        version: '3.0.100-preview6-012264'
        includePreviewVersions: true
        
    - task: DotNetCoreCLI@2
      displayName: 'Restore NuGet dependencies'
      inputs:
        command: 'restore'
        projects: './Api.Core.SolarMeasurements.sln'
        feedsToUse: 'config'
        nugetConfigPath: './NuGet.Config'
        
    - task: DotNetCoreCLI@2
      displayName: 'Build solution'
      inputs:
        command: 'build'
        projects: './Api.Core.SolarMeasurements.sln'
        arguments: '--no-restore --configuration $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: 'Publish API binaries'
      inputs:
        command: 'publish'
        projects: './Api.Core.SolarMeasurements.sln'
        zipAfterPublish: false
        publishWebProjects: true
        arguments: '--no-build --configuration $(buildConfiguration)'
        
    - bash: ls -la $(System.DefaultWorkingDirectory)/src/Api.Core.SolarMeasurements/bin/$(buildConfiguration)/netcoreapp3.0

    - publish: $(System.DefaultWorkingDirectory)/src/Api.Core.SolarMeasurements/bin/$(buildConfiguration)/netcoreapp3.0/publish
      displayName: 'Archive API binaries'
      artifact: ApiBinaries

    - publish: $(System.DefaultWorkingDirectory)/src/Api.Core.SolarMeasurements/Dockerfile
      displayName: 'Archive Dockerfile'
      artifact: Dockerfile

      # Note: we cannot publish just the binaries for the unit and integration tests because we also need the source code
#       when we do code coverage
#    - publish: $(System.DefaultWorkingDirectory)/test/unit/Api.Core.SolarMeasurementsUnitTests/bin/$(buildConfiguration)/netcoreapp3.0/publish/
#      displayName: 'Archive Unit test binaries'
#      artifact: UnitTestBinaries
#
#    - publish: $(System.DefaultWorkingDirectory)/test/integration/Api.Core.SolarMeasurementsIntegrationTests/bin/$(buildConfiguration)/netcoreapp3.0/publish/
#      displayName: 'Archive Integration test binaries'
#      artifact: IntegrationTestBinaries

    - publish: $(System.DefaultWorkingDirectory)
      displayName: 'Archive fully built source tree'
      artifact: BuiltSourceTree

  #############################################################################################        
  # Stage: Tests
  #############################################################################################        

- stage: Tests

  jobs:

    - job: UnitTests

      displayName: 'Run unit tests'

      pool:
        vmImage: 'ubuntu-latest'
      
      steps:

        # skip source code checkout since we've already built and archived it 
        - checkout: none
          
        - download: current
          artifact: BuiltSourceTree
            
        - task: UseDotNet@2
          displayName: 'Install .NET Core 3.0 SDK'
          inputs:
            packageType: 'sdk'
            version: '3.0.100-preview6-012264'
            includePreviewVersions: true
            
        - task: DotNetCoreCLI@2
          displayName: 'Run unit tests'
          inputs:
            command: 'test'
            projects: '$(Pipeline.Workspace)/BuiltSourceTree/test/unit/Api.Core.SolarMeasurementsUnitTests/Api.Core.SolarMeasurementsUnitTests.csproj'
            testRunTitle: 'Run unit tests'
            publishTestResults: true
            arguments: '--no-build --configuration $(buildConfiguration)'

        - bash: echo "Publish results..."
        - bash: echo "Save coverage report..."

    - job: IntegrationTests
      dependsOn: []    # this removes the implicit dependency on previous job and causes this to run in parallel
      displayName: 'Run integration tests'
      pool:
        vmImage: 'ubuntu-latest'
      steps:

        # skip source code checkout since we've already built and archived it 
        - checkout: none

        - download: current
          artifact: BuiltSourceTree

        - task: UseDotNet@2
          displayName: 'Install .NET Core 3.0 SDK'
          inputs:
            packageType: 'sdk'
            version: '3.0.100-preview6-012264'
            includePreviewVersions: true

        - task: DotNetCoreCLI@2
          displayName: 'Run integration tests'
          inputs:
            command: 'test'
            projects: '$(Pipeline.Workspace)/BuiltSourceTree/test/integration/Api.Core.SolarMeasurementsIntegrationTests/Api.Core.SolarMeasurementsIntegrationTests.csproj'
            testRunTitle: 'Run integration tests'
            publishTestResults: true
            arguments: '--no-build --configuration $(buildConfiguration)'
  
        - bash: echo "Publish results..."
        - bash: echo "Save coverage report..."

  #############################################################################################        
  # Stage: Publish
  #############################################################################################        

- stage: Publish
  jobs:
    - job: DockerImageCreate

      displayName: 'Publish API Docker image for the API'

      pool:
        vmImage: 'ubuntu-latest'

      steps:
        - checkout: none

#        - download: current
#          artifact: ApiBinaries
#          
#        - download: current
#          artifact: Dockerfile
          
        - download: current
          artifact: BuiltSourceTree 
          
        - bash: ls -lF $(Pipeline.Workspace)/BuiltSourceTree 
        #ApiBinaries $(Pipeline.Workspace)/Dockerfile $(Pipeline.Workspace)/TestResults

        - task: Docker@2
          displayName: 'Login to DockerHub'
          inputs:
            command: 'login'
            containerRegistry: 'DockerHub connection (xen22)'

        - task: Docker@2
          displayName: 'Create Docker image'
          inputs:
            command: 'build'
            Dockerfile: '$(Pipeline.Workspace)/BuiltSourceTree/src/Api.Core.SolarMeasurements/Dockerfile'
            tags: 'Api.Core.SolarMeasurements:$(version)-$(Build.BuildId)'
            #repository: '$(dockerId)/$(dockerRepo)'

        - task: Docker@2
          displayName: 'Push Docker image'
          inputs:
            command: 'push'
            Dockerfile: '$(Pipeline.Workspace)/BuiltSourceTree/src/Api.Core.SolarMeasurements/Dockerfile'
            tags: 'Api.Core.SolarMeasurements:$(version)-$(Build.BuildId)'
            repository: '$(dockerId)/$(dockerRepo)'

    - job: CreateApiProxy
      displayName: 'Create and publish API Proxy to NuGet repo'
      pool:
        vmImage: 'ubuntu-latest'

      steps:
        - task: UseDotNet@2
          displayName: 'Install .NET Core 3.0 SDK'
          inputs:
            packageType: 'sdk'
            version: '3.0.100-preview6-012264'
            includePreviewVersions: true

#############################################################################################        
# Stage: Deploy
#############################################################################################        

# TODO: deploy to Staging/QA (or should this go into a separate release pipeline?)



  #    - script: dotnet build --configuration $(buildConfiguration)
#      displayName: 'dotnet build $(buildConfiguration)'
#    - script: dotnet publish --configuration $(buildConfiguration) src/Api.Core.SolarMeasurements/Api.Core.SolarMeasurements.csproj
#      displayName: 'dotnet publish $(buildConfiguration)'
#    - script: 'docker build -t $(dockerId)/Api.Core.SolarMeasurements:$(version)-$(Build.BuildId)' 
#      displayName: 'docker build image'
#    - script: 'docker login -u $(dockerId) -p $(dockerPwd)'
#      displayName: 'docker login'
#    - script: 'docker push $(dockerId)/$(dockerRepo):Api.Core.SolarMeasurements'
  


# steps:
# # - task: DotNetCoreInstaller@0
# #   displayName: 'Install .net core 3.0 (preview)'
# #   inputs:
# #     version: '3.0.100-preview6-012264'
# - task: UseDotNet@2
#   displayName: 'Install .NET Core 3.0 SDK'
#   inputs:
#     packageType: 'sdk'
#     version: '3.0.100-preview6-012264'
#     includePreviewVersions: true
# - script: dotnet build --configuration $(buildConfiguration)
#   displayName: 'dotnet build $(buildConfiguration)'

# run unit tests
# - task: DotNetCoreCLI@2
#   displayName: 'Run unit tests'
#   inputs:
#     command: 'test'
#     projects: './test/unit/Api.Core.SolarMeasurementsUnitTests/Api.Core.SolarMeasurementsUnitTests.csproj'
#     testRunTitle: 'Run unit tests'

# run integration tests
# - task: DotNetCoreCLI@2
#   displayName: 'Run integration tests'
#   inputs:
#     command: 'test'
#     projects: './test/integration/Api.Core.SolarMeasurementsIntegrationTests/Api.Core.SolarMeasurementsIntegrationTests.csproj'
#     testRunTitle: 'Run integration tests'

# generate proxy

# push proxy to Nuget repo

 
