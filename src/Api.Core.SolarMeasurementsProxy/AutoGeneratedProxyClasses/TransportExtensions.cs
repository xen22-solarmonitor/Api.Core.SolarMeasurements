// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Api.Core.SolarMeasurementsProxy
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Transport.
    /// </summary>
    public static partial class TransportExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='startTime3'>
            /// </param>
            /// <param name='endTime'>
            /// </param>
            /// <param name='granularity'>
            /// Possible values include: 'hourly', 'daily', 'weekly', 'monthly'
            /// </param>
            /// <param name='version'>
            /// </param>
            public static IList<Measurement> SolarMeasurements(this ITransport operations, System.DateTime startTime3, System.DateTime endTime, string granularity, string version)
            {
                return operations.SolarMeasurementsAsync(startTime3, endTime, granularity, version).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='startTime3'>
            /// </param>
            /// <param name='endTime'>
            /// </param>
            /// <param name='granularity'>
            /// Possible values include: 'hourly', 'daily', 'weekly', 'monthly'
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Measurement>> SolarMeasurementsAsync(this ITransport operations, System.DateTime startTime3, System.DateTime endTime, string granularity, string version, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SolarMeasurementsWithHttpMessagesAsync(startTime3, endTime, granularity, version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='timestamp'>
            /// </param>
            /// <param name='version'>
            /// </param>
            public static Measurement SolarMeasurements1(this ITransport operations, System.DateTime timestamp, string version)
            {
                return operations.SolarMeasurements1Async(timestamp, version).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='timestamp'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Measurement> SolarMeasurements1Async(this ITransport operations, System.DateTime timestamp, string version, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SolarMeasurements1WithHttpMessagesAsync(timestamp, version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns version information about this service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static VersionDto Version(this ITransport operations)
            {
                return operations.VersionAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns version information about this service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VersionDto> VersionAsync(this ITransport operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.VersionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
